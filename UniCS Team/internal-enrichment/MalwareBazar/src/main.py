from pycti import OpenCTIConnectorHelper, get_config_variable, SimpleObservable, OpenCTIStix2Utils
import time
from stix2 import Identity, Malware, Indicator, Relationship, TLP_WHITE, Bundle, ExternalReference, Report, Note, File
import os
import yaml
from datetime import datetime
import requests
import json
import traceback
from typing import Any, List, Mapping, NamedTuple, Optional


class MalwareBazarConnector:
    def __init__(self):
        # Initialization procedures
        config_file_path = os.path.dirname(os.path.abspath(__file__)) + "/config.yml"
        config = (
            yaml.load(open(config_file_path), Loader=yaml.FullLoader)
            if os.path.isfile(config_file_path)
            else {}
        )
        self.helper = OpenCTIConnectorHelper(config)
        self.api_key = get_config_variable(
            "MALWAREBAZAAR_API_KEY", ["malwarebazaar", "api_key"], config
        )
        self.max_tlp = get_config_variable(
            "MALWAREBAZAAR_MAX_TLP", ["malwarebazaar", "max_tlp"], config
        )
        self.whitelist_label = self.helper.api.label.create(
            value="whitelist", color="#4caf50"
        )
        self.headers = {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            'API-KEY': self.api_key
        }
        self.url = "https://mb-api.abuse.ch/api/v1/"

        self.ext_mw = ExternalReference(
            source_name="MalwareBazaar",
            description="MalwareBazaar is a project from abuse.ch with the goal of sharing malware samples with the infosec community, AV vendors and threat intelligence providers.",
            url="https://bazaar.abuse.ch/"
        )

        self.mw = self.helper.api.identity.list(filters=[{"key":"name", "values":"MalwareBazaar"}])
        mwid = None
        if(self.mw): mwid = self.mw[0]["standard_id"]
        else: mwid = OpenCTIStix2Utils.generate_random_stix_id("identity")
        self.mw = Identity(
            id=mwid,
            name="MalwareBazaar",
            identity_class="organization",
            external_references=[self.ext_mw]
        )
        b = Bundle(
            objects=[
                self.mw
            ],
            allow_custom=True,
            entities_types=self.helper.connect_scope
        ).serialize()
        self.helper.send_stix2_bundle(b)

        self.t = 3*24*60*60
        self.last_run = 0

    def _import_knowledge(self):
        params = {"query": "get_recent", "selector": "100"}	
        r = requests.post(self.url, headers=self.headers, data=params)
        sc = r.status_code
        if(sc == 200):
            d=r.json()
            if(d["query_status"] == "ok"):
                self.helper.log_info("Importing Knowledgw")
                d = d["data"]
                bundleObjects = []
                timestamp = int(time.time())
                now = datetime.utcfromtimestamp(timestamp)
                friendly_name = "MalwareBazar run @ " + now.strftime("%Y-%m-%d %H:%M:%S")
                work_id = self.helper.api.work.initiate_work(self.helper.connect_id, friendly_name)
                for dd in d:
                    f = File(
                        hashes={"SHA-256": dd["sha256_hash"]},
                        name=dd["signature"],
                        custom_properties = {
                            "labels": ["MalwareBazaar"],
                            "created_by": self.mw.id,
                        }
                    )
                    bundleObjects.append(f)
                bundle = Bundle(objects=bundleObjects, allow_custom=True).serialize()
                self.helper.send_stix2_bundle(bundle, work_id=work_id)

    def _create_yara(self, yara):
        self.helper.log_info("Yara rule added")
        return self.helper.api.indicator.create(
            name=yara.get("rule_name", "No rulename provided"),
            description=json.dumps(
                {
                    "description": yara.get("description", "No description provided"),
                    "author": yara.get("author", "No author provided"),
                    "source": yara.get("reference", "No source provided")
                }
            ),
            pattern_type="yara",
            x_opencti_main_observable_type="StixFile",
            labels=["MalwareBazar"]
        )

    def _update_entry(self, data):
        h = data['hashes'][0]['hash']
        k = data['name']
        params = {"query": "update", "sha256_hash": h, "key": "add_tag", "value": k}	
        r = requests.post(self.url, headers=self.headers, data=params)
        sc = r.status_code
        if(sc == 200):
            d = r.json()
            if(d["query_status"] == "updated"):
                self.helper.log_info("Sample Updated")
            else:
                self.helper.log_info("Sample not updated :(")


    def _process_file(self, observable):
        try:
            if observable is None:
                self.helper.log_info("NONE RECEIVED :(")
                return
            if observable["entity_type"] in ["StixFile", "Artifact", "File"]:
                h = observable['hashes'][0]['hash']
                ob_id = observable["standard_id"]
                params = {"query": "get_info", "hash": h}	
                r = requests.post(self.url, headers=self.headers, data=params)
                sc = r.status_code
                if(sc == 200):
                    self.helper.log_info("PROCESSING FILE")
                    #self.helper.log_info(observable)
                    data = r.json()
                    if(data["query_status"] == "hash_not_found"):
                        self.helper.log_info("not hash found :(, sending to malwarebazaar endpoint")
                        self._update_entry(observable)
                    if(data["query_status"] == "illegal_hash"):
                        self.helper.log_info("Not Found")
                    elif(data["query_status"] == "ok"):
                        timestamp = int(time.time())
                        now = datetime.utcfromtimestamp(timestamp)
                        friendly_name = "MalwareBazar run @ " + now.strftime("%Y-%m-%d %H:%M:%S")
                        work_id = self.helper.api.work.initiate_work(self.helper.connect_id, friendly_name)
                        self.helper.log_info(r.json())
                        bundleObjects = []
                        self.helper.log_info("query ok")
                        self.helper.log_info(data["data"])
                        data = data["data"][0]
                        final_observable = self.helper.api.stix_cyber_observable.update_field(
                            id=ob_id,
                            input={"key": "name", "value": data["file_name"]},
                        )
                        if("yara_rules" in data):
                            yaras = list(
                                filter(
                                    None,
                                    [
                                        self._create_yara(yara)
                                        for yara in data["yara_rules"]
                                    ],
                                )
                            )

                            for yara in yaras:
                                self.helper.api.stix_core_relationship.create(
                                    fromId=final_observable["id"],
                                    toId=yara["id"],
                                    relationship_type="related-to",
                                )
                        malware = Malware(
                            id=OpenCTIStix2Utils.generate_random_stix_id("malware"),
                            is_family=False,
                            name=data["file_name"],
                            labels=["malware", "MalwareBazar"],
                            first_seen=datetime.strptime(data["first_seen"], "%Y-%m-%d %H:%M:%S"),
                            object_marking_refs=[TLP_WHITE],
                            external_references=[self.ext_mw]
                            )
                        bundleObjects.append(malware)
                        report = Report(
                            id=OpenCTIStix2Utils.generate_random_stix_id("report"),
                            report_types=["malware"],
                            name=data["file_name"],
                            published=datetime.strptime(data["first_seen"], "%Y-%m-%d %H:%M:%S"),
                            labels=["malware", "MalwareBazar"],
                            object_refs=[malware.id],
                            created_by_ref=self.mw.id,
                            external_references=[self.ext_mw]
                        )
                        bundleObjects.append(report)
                        note = Note(
                            id=OpenCTIStix2Utils.generate_random_stix_id("note"),
                            content=data["file_name"],
                            object_refs=[malware.id, report.id],
                            labels=["malware", "MalwareBazar"],
                            external_references=[self.ext_mw]
                        )
                        bundleObjects.append(note)
                        indicator = Indicator(
                            id=OpenCTIStix2Utils.generate_random_stix_id("indicator"),
                            pattern_type="stix",
                            created_by_ref=self.mw.id,
                            name=data["file_name"],
                            indicator_types=["compromised"],
                            labels=["MalwareBazar"],
                            object_marking_refs=[TLP_WHITE],
                        )
                        bundleObjects.append(indicator)
                        relrr = Relationship(
                            id=OpenCTIStix2Utils.generate_random_stix_id("relationship"),
                            relationship_type="indicates",
                            source_ref=indicator.id,
                            target_ref=malware.id,
                            confidence=self.helper.connect_confidence_level,
                            external_references=[self.ext_mw]
                        )
                        bundleObjects.append(relrr)
                        bundle = Bundle(objects=bundleObjects, allow_custom=True).serialize()
                        self.helper.send_stix2_bundle(bundle, work_id=work_id)
                        
        except(Exception) as e:
            self.helper.log_info(e)
            self.helper.log_info(traceback.format_exc())
    
    def _process_message(self, data):
        self._check_imp()
        entity_id = data["entity_id"]
        observable = self.helper.api.stix_cyber_observable.read(id=entity_id)
        self.helper.log_info("Received observable")
        return self._process_file(observable)

    def _check_imp(self):
        now = int(time.time())
        if((now - self.last_run) > self.t):
            self.helper.log_info("Triggered")
            self.last_run = now
            self._import_knowledge()

    # Start the main loop
    def start(self):
        self.helper.listen(self._process_message)

if __name__ == "__main__":
    try:
        malwarebazare_connector = MalwareBazarConnector()
        malwarebazare_connector.start()
    except Exception as e:
        print(e)
        time.sleep(10)
        exit(0)
